<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Paolo Di Lorenzo Blog</title>
        <description>A collection of articles on data, programming, tech, and the world by Paolo Di Lorenzo.</description>
        <link>https://dilorenzo.pl</link>
        
            
                
                  <item>
                      <title>Automated publishing with Jekyll and Travis CI on iOS</title>
                      <description>&lt;p&gt;My website/blog that you are currently reading is built using the &lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll framework&lt;/a&gt; and hosted on &lt;a href=&quot;https://pages.github.com&quot;&gt;Github Pages&lt;/a&gt;. Jekyll allows one to define webpage layouts, insert plugins, and automate much of the blog generating process. For example, on my website I have used a &lt;a href=&quot;https://github.com/recurser/jekyll-plugins/blob/master/generate_categories.rb&quot;&gt;plugin&lt;/a&gt; that automatically generates all of the &lt;a href=&quot;https://dilorenzo.pl/blog/categories&quot;&gt;categories&lt;/a&gt; from the written posts. Similarly blog posts have a predefined layout that is used which allows me to focus on writing the content of each post and not worry about making sure each detail of the site (sidebar, CSS, etc.) is consistent throughout. Jekyll has the added benefit of generating a static HTML webpage from your layouts, stylesheets, plugins, and pages which tend to render much faster since there is no dynamic content.&lt;/p&gt;

&lt;p&gt;With this power and flexibility comes a cost: in order to generate the webpages from the various files that are used, I need to run the &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt; command from the root directory. This compiles the files into a static webpage located in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/_site&lt;/code&gt; folder. The contents of the &lt;code class=&quot;highlighter-rouge&quot;&gt;/_site&lt;/code&gt; folder are pushed to my dedicated &lt;a href=&quot;https://github.com/pdil/_site&quot;&gt;repository&lt;/a&gt; on Github which then hosts the website on Github pages. The files used to generate the website are located in the &lt;a href=&quot;https://github.com/pdil/website-generator&quot;&gt;website-generator&lt;/a&gt; repository.&lt;/p&gt;

&lt;p&gt;So how do I build my website if I don’t have access to my laptop with the cloned repo and a terminal to use? This might occur when I’m away from home and need to fix a quick typo. Or perhaps I’m traveling and want to submit a post about my experiences. Enter my workflow, which allows me to update my website from any computer with an internet connection, even an iPhone or iPad.&lt;/p&gt;

&lt;h2 id=&quot;automation-with-travis-ci&quot;&gt;Automation with Travis CI&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis CI&lt;/a&gt; is a continuous integration platform that is free for open source projects. When it is hooked up to a Github repository, it automatically builds the contents of the repo and runs any custom scripts or tests on the code within. The ability to customize settings and run shell scripts makes Travis CI very powerful in automating tasks.&lt;/p&gt;

&lt;p&gt;Here are the steps that Travis CI executes for this site:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Changes to the website are pushed to &lt;a href=&quot;https://github.com/pdil/website-generator&quot;&gt;pdil/website-generator&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Travis CI automatically begins the build process
    &lt;ul&gt;
      &lt;li&gt;The &lt;a href=&quot;https://github.com/pdil/website-generator/blob/master/.travis.yml&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;&lt;/a&gt; file lists the settings that Travis is to use, as well as any commands that should be executed before/after the build.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the Travis CI server we install some Ruby gems that are needed for the build (&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;html-proofer&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-paginate&lt;/code&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Run &lt;a href=&quot;https://github.com/pdil/website-generator/blob/master/scripts/build.sh&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scripts/build.sh&lt;/code&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;build.sh&lt;/code&gt; clones the &lt;code class=&quot;highlighter-rouge&quot;&gt;pdil/_site&lt;/code&gt; repo so that changes to it will be tracked and pushed back to Github&lt;/li&gt;
      &lt;li&gt;Next it runs &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt; and checks for any HTML errors with &lt;code class=&quot;highlighter-rouge&quot;&gt;html-proofer&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Deploy the generated website by running &lt;a href=&quot;https://github.com/pdil/website-generator/blob/master/scripts/deploy.sh&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scripts/deploy.sh&lt;/code&gt;&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;deploy.sh&lt;/code&gt; switches to the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder, commits the changes, and pushes all of the files to &lt;a href=&quot;https://github.com/pdil/_site&quot;&gt;pdil/_site&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Github does all the work by hosting the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;pdil/_site&lt;/code&gt; on Github pages. The CNAME file points the domain name (&lt;code class=&quot;highlighter-rouge&quot;&gt;dilorenzo.pl&lt;/code&gt;) to the hosted content.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;I receive a push notification from &lt;a href=&quot;https://pushover.net&quot;&gt;Pushover&lt;/a&gt; indicating that the build was successfully deployed (or that it failed).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That is the basic process by which my website is built, from sending the commit to viewing the content on this page.&lt;/p&gt;

&lt;p&gt;Now I’ll briefly talk about the tools I use on iOS to post to this website.&lt;/p&gt;

&lt;h2 id=&quot;publishing-from-ios&quot;&gt;Publishing from iOS&lt;/h2&gt;

&lt;p&gt;My workflow for editing and posting to this site on iOS revolve around two main apps.&lt;/p&gt;

&lt;h3 id=&quot;working-copy&quot;&gt;Working Copy&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/working-copy-powerful-git-client/id896694807?mt=8&amp;amp;at=1001lxud&quot; target=&quot;_blank&quot;&gt;Working Copy&lt;/a&gt; is a powerful git client that allows you to create and clone git repositories. I have my &lt;a href=&quot;https://github.com/pdil/website-generator&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;website-generator&lt;/code&gt;&lt;/a&gt; repository in Working Copy which lets me edit any file in that repo and commit the changes. As soon as the changes are committed, the Travis CI workflow detailed above is kicked off.&lt;/p&gt;

&lt;h3 id=&quot;coda&quot;&gt;Coda&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/coda/id500906297?mt=8&amp;amp;at=1001lxud&quot; target=&quot;_blank&quot;&gt;Coda&lt;/a&gt; is a wonderful code editing app by &lt;a href=&quot;https://panic.com&quot; target=&quot;_blank&quot;&gt;Panic&lt;/a&gt;. I use it to edit the files that I keep in Working Copy because of its great features. I especially love the webpage preview tool which lets you see how your content looks before you push.&lt;/p&gt;

&lt;h3 id=&quot;side-by-side&quot;&gt;Side-by-side&lt;/h3&gt;

&lt;p&gt;Both Coda and Working Copy are compatible with Webdav servers so anything you edit in Coda immediately appears in Working Copy when the server is running (even if the iPad or iPhone is offline).&lt;/p&gt;

&lt;p&gt;Here is an image of these two apps working side-by-side:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dilorenzo.pl/images/working-copy-coda-workflow.png&quot;&gt;&lt;img src=&quot;https://dilorenzo.pl/images/working-copy-coda-workflow.png&quot; alt=&quot;Working Copy / Coda workflow&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The iPad is great for this because of its SplitView multitasking feature. I’m excited for iOS 11’s file management and drag-and-drop improvements to help even further.&lt;/p&gt;

&lt;p&gt;I use an &lt;a href=&quot;https://www.apple.com/shop/product/MLA22LL/A/magic-keyboard-us-english?fnode=56&quot; target=&quot;_blank&quot;&gt;Apple Magic Keyboard&lt;/a&gt; for typing with the iPad.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The combination of web services and iOS apps really come together to provide a streamlined workflow for publishing blogs using Jekyll. In fact, the blog post you’re reading right now was written from my iPad Air 2! This process could be extended to push the generated website files to any hosting platform that one is using to host their site (such as Amazon S3, Linode, etc.).&lt;/p&gt;

&lt;p&gt;If you have any other ideas for improving this workflow or what techniques you use for your own content, tell me on &lt;a href=&quot;https://twitter.com/dilorenzopl&quot;&gt;Twitter&lt;/a&gt;. I’m always looking for ways to improve and am curious about other people’s methods.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;p&gt;The following links contain services and products that were mentioned earlier in the article, for your reference.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pdil/website-generator&quot;&gt;website-generator repo&lt;/a&gt; (contains this all files used to generate this website)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pdil/_site&quot;&gt;_site repo&lt;/a&gt; (contains the generated files that actually present the site)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis CI&lt;/a&gt; (continuous integration platform)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pushover.net&quot;&gt;Pushover&lt;/a&gt; (automated push notification service)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/working-copy-powerful-git-client/id896694807?mt=8&amp;amp;at=1001lxud&quot;&gt;Working Copy&lt;/a&gt; (iOS git client)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/coda/id500906297?mt=8&amp;amp;at=1001lxud&quot;&gt;Coda&lt;/a&gt; (iOS web development IDE)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apple.com/shop/product/MLA22LL/A/magic-keyboard-us-english?fnode=56&quot;&gt;Apple Magic Keyboard&lt;/a&gt; (wireless Bluetooth keyboard)&lt;/li&gt;
&lt;/ul&gt;
</description>
                      <pubDate>2017-06-26T20:30:00+00:00</pubDate>
                      <link>https://dilorenzo.pl/meta/2017/06/26/automated-publishing-ios/</link>
                      <guid isPermalink="true">https://dilorenzo.pl/meta/2017/06/26/automated-publishing-ios/</guid>
                  </item>
                
            
        
            
                
            
        
            
                
                  <item>
                      <title>usmap v0.2.0 released</title>
                      <description>&lt;p&gt;I finally got around to updating usmap to version 0.2.0. This version adds the crucial feature of adding data to your maps so that you can create colorful choropleths. This is done by using the &lt;code&gt;map_with_data&lt;/code&gt; function to retrieve a data frame. Alternatively, the &lt;code&gt;plot_usmap&lt;/code&gt; function has been updated to allow a &lt;code&gt;data&lt;/code&gt; parameter to be defined.
&lt;br /&gt;
Here is an example of such a plot: &lt;br /&gt;&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://dilorenzo.pl/images/state-pop-example-w-key.png&quot; /&gt;&lt;/center&gt;

&lt;p&gt;This map shows the population of each state as of 2015. The code to create this is as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ggplot2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot_usmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statepop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pop_2015&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scale_fill_continuous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;white&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Population (2015)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scales&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dollar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scale_x_continuous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scale_y_continuous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend.position&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;right&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see we utilize the extensibility of &lt;code&gt;ggplot2&lt;/code&gt; to create a nice map complete with a key.
&lt;br /&gt;&lt;br /&gt;
The &lt;a href=&quot;https://cran.r-project.org/web/packages/usmap/vignettes/mapping.html&quot; target=&quot;_blank&quot;&gt;mapping vignette&lt;/a&gt; has been updated with more examples of the new functionality. Be sure to view the documentation for more help with &lt;code&gt;plot_usmap&lt;/code&gt; and &lt;code&gt;map_with_data&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot_usmap&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map_with_data&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;p&gt;More features and fixes will be added soon as I move the package towards a stable 1.0 release. As always please check out the &lt;a href=&quot;http://github.com/pdil/usmap&quot; target=&quot;_blank&quot;&gt;Github repo&lt;/a&gt; for more information and to suggest/add new features.&lt;/p&gt;
</description>
                      <pubDate>2017-04-29T20:20:00+00:00</pubDate>
                      <link>https://dilorenzo.pl/data/2017/04/29/usmap-v0-2-0/</link>
                      <guid isPermalink="true">https://dilorenzo.pl/data/2017/04/29/usmap-v0-2-0/</guid>
                  </item>
                
            
        
            
                
            
        
            
                
                  <item>
                      <title>usmap released</title>
                      <description>&lt;p&gt;I just released my first R package to &lt;a href=&quot;http://cran.r-project.org&quot; target=&quot;_blank&quot;&gt;CRAN&lt;/a&gt;. It’s called &lt;a href=&quot;http://cran.r-project.org/package=usmap&quot; target=&quot;_blank&quot;&gt;usmap&lt;/a&gt; and can help you create nice US maps for visualizing countrywide data.&lt;/p&gt;

&lt;p&gt;Normally, plotting US maps in R is awkward because Alaska and Hawaii are far from the mainland US. So you either make the rest of the US look small, or omit Alaska and Hawaii entirely.&lt;/p&gt;

&lt;p&gt;Here’s an example: &lt;br /&gt;&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;https://dilorenzo.pl/images/ugly-usmap.png&quot; /&gt;&lt;/center&gt;

&lt;p&gt;Absolutely disgusting.&lt;/p&gt;

&lt;p&gt;Let’s try using &lt;code class=&quot;highlighter-rouge&quot;&gt;usmap&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot_usmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;center&gt;&lt;img src=&quot;https://dilorenzo.pl/images/nice-usmap.png&quot; /&gt;&lt;/center&gt;

&lt;p&gt;Ah, much better. The map is even drawn using a nicer &lt;a href=&quot;https://en.wikipedia.org/wiki/Albers_projection&quot; target=&quot;_blank&quot;&gt;equal-area projection&lt;/a&gt;, rather than the default &lt;a href=&quot;https://en.wikipedia.org/wiki/Mercator_projection&quot; target=&quot;_blank&quot;&gt;Mercator&lt;/a&gt; that always seems to be used. You can also plot all the counties of the US with this package and select only certain states/counties to be drawn as well. You can see the county map at the landing page I created for this package by &lt;a href=&quot;https://dilorenzo.pl/usmap&quot;&gt;clicking here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;plot_usmap&lt;/code&gt; function returns a &lt;a href=&quot;https://github.com/tidyverse/ggplot2&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ggplot&lt;/code&gt;&lt;/a&gt; object, which means you can very easily change the colors, titles, labels, etc. of the plot. See the &lt;a href=&quot;https://cran.r-project.org/web/packages/usmap/vignettes/mapping.html&quot; target=&quot;_blank&quot;&gt;mapping vignette&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;There are some convenience methods for working with &lt;a href=&quot;https://en.wikipedia.org/wiki/FIPS_county_code&quot; target=&quot;_blank&quot;&gt;FIPS codes&lt;/a&gt;, which is how the states and counties in the package are identified.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NJ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NJ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;county&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Mercer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you want more information, be sure to check out the &lt;a href=&quot;http://github.com/pdil/usmap&quot; target=&quot;_blank&quot;&gt;Github repository&lt;/a&gt; or the vignettes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-r&quot; data-lang=&quot;r&quot;&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vignette&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usmap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vignette&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;introduction&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usmap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vignette&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mapping&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usmap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Feel free to fork the repository and submit pull requests with feature changes and fixes, I’m open to any suggestions. This package was a learning experience for me in creating R packages and starting an open source project. I look forward to maintaining it going forward and implementing great new features.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The code that was used to create these maps was based on this blog post: &lt;a href=&quot;https://rud.is/b/2014/11/16/moving-the-earth-well-alaska-hawaii-with-r/&quot; target=&quot;_blank&quot;&gt;https://rud.is/b/2014/11/16/moving-the-earth-well-alaska-hawaii-with-r/&lt;/a&gt;.&lt;/p&gt;
</description>
                      <pubDate>2017-01-30T03:32:00+00:00</pubDate>
                      <link>https://dilorenzo.pl/data/2017/01/30/usmap-released/</link>
                      <guid isPermalink="true">https://dilorenzo.pl/data/2017/01/30/usmap-released/</guid>
                  </item>
                
            
        
    </channel>
</rss>